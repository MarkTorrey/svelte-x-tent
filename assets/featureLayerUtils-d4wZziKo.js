import{fB as Y,p as f,v as _,fC as B,s as y}from"./index-eSY5-lt-.js";import{i as A}from"./originUtils-1w5HeAJR.js";import{I as G,y as P,w as E,b as k,u as z,v as j,l as N,d as C,m as T}from"./utils-RaS0KmfI.js";import{t as V}from"./fetchService-GBO3P7GB.js";import{a as q}from"./lazyLayerLoader-yzrHI9gA.js";import{o as g}from"./jsonContext-YSqJBqeH.js";import{l as x,a as I,u as $,f as c,i as b}from"./portalItemUtils-svYaQgLA.js";import"./multiOriginJSONSupportUtils-R5XHSAtL.js";import"./saveAPIKeyUtils-5srUkGVJ.js";const h="Feature Service",w="feature-layer-utils",H=`${w}-save`,Q=`${w}-save-as`,p=`${w}-saveall`,m=`${w}-saveall-as`;function v(e){return{isValid:B(e)&&(e.type!=="feature"||!e.dynamicDataSource),errorMessage:"Feature layer should be a layer or table in a map or feature service"}}function O(e){const a=[],r=[];for(const{layer:n,layerJSON:l}of e)n.isTable?r.push(l):a.push(l);return{layers:a,tables:r}}function F(e){return O([e])}async function J(e,a){return/\/\d+\/?$/.test(e.url)?F(a[0]):M(a,e)}async function M(e,a){if(!a)return e.reverse(),O(e);const{layer:{url:r,customParameters:n,apiKey:l}}=e[0];let t=await a.fetchData("json");(t==null?void 0:t.layers)!=null&&(t==null?void 0:t.tables)!=null||(t=await W(t,{url:r??"",customParameters:n,apiKey:l},e.map(s=>s.layer.layerId)));for(const s of e)R(s.layer,s.layerJSON,t);return t}async function W(e,a,r){e||(e={}),e.layers||(e.layers=[]),e.tables||(e.tables=[]);const{url:n,customParameters:l,apiKey:t}=a,{serviceJSON:s,layersJSON:o}=await V(n,{customParameters:l,apiKey:t}),i=S(e.layers,s.layers,r),u=S(e.tables,s.tables,r);e.layers=i.itemResources,e.tables=u.itemResources;const d=[...i.added,...u.added],K=o?[...o.layers,...o.tables]:[];return await X(e,d,n,K),e}function S(e,a,r){const n=Y(e,a,(t,s)=>t.id===s.id);e=e.filter(t=>!n.removed.some(s=>s.id===t.id));const l=n.added;return l.forEach(({id:t})=>{e.push({id:t})}),{itemResources:e,added:l.filter(({id:t})=>!r.includes(t))}}async function X(e,a,r,n){const l=await Z(a),t=a.map(({id:s,type:o})=>new(l.get(o))({url:r,layerId:s,sourceJSON:n.find(({id:i})=>i===s)}));await Promise.allSettled(t.map(s=>s.load())),t.forEach(s=>{const{layerId:o,loaded:i,defaultPopupTemplate:u}=s;if(!i||u==null)return;const d={id:o,popupInfo:u.toJSON()};s.operationalLayerType!=="ArcGISFeatureLayer"&&(d.layerType=s.operationalLayerType),R(s,d,e)})}async function Z(e){const a=[];e.forEach(({type:l})=>{const t=ee(l),s=q[t];a.push(s())});const r=await Promise.all(a),n=new Map;return e.forEach(({type:l},t)=>{n.set(l,r[t])}),n}function ee(e){let a;switch(e){case"Feature Layer":case"Table":a="FeatureLayer";break;case"Oriented Imagery Layer":a="OrientedImageryLayer"}return a}function R(e,a,r){e.isTable?L(r.tables,a):L(r.layers,a)}function L(e,a){const r=e.findIndex(({id:n})=>n===a.id);r===-1?e.push(a):e[r]=a}function D(e,a){if(!e.length)throw new y(`${a}:missing-parameters`,"'layers' array should contain at least one feature layer")}function ae(e,a){const r=e.map(n=>n.portalItem.id);if(new Set(r).size>1)throw new y(`${a}:invalid-parameters`,"All layers in the 'layers' array should be loaded from the same portal item")}function U(e,a){const r=e.map(n=>n.layerId);if(new Set(r).size!==r.length)throw new y(`${a}:invalid-parameters`,"'layers' array should contain only one instance each of layer or table in a feature service")}async function re(e){D(e,p),await Promise.all(e.map(a=>a.load()));for(const a of e)N(a,p,v),C({layer:a,itemType:h,errorNamePrefix:p});ae(e,p),U(e,p)}async function te(e,a){const{url:r,layerId:n,title:l,fullExtent:t,isTable:s}=e,o=f(r);a.url=(o==null?void 0:o.serverType)==="FeatureServer"?r:`${r}/${n}`,a.title||(a.title=l),a.extent=null,s||t==null||(a.extent=await x(t)),I(a,c.METADATA),I(a,c.MULTI_LAYER),b(a,c.SINGLE_LAYER),s&&b(a,c.TABLE)}function se(e,a){for(const t of e){const s=t.parsedUrl.path,o=f(s);if(!(o==null?void 0:o.url.path))throw new y(`${a}:invalid-parameters`,T(t,`has unsupported url pattern: ${s}`),{layer:t});const u=o==null?void 0:o.serverType;if(u!=="FeatureServer"&&u!=="MapServer")throw new y(`${a}:invalid-parameters`,T(t,`has unsupported server type: ${u}`),{layer:t});if(u==="MapServer"&&e.length>1)throw new y(`${a}:invalid-parameters`,"Only one layer or table in a map service can be saved")}const r=f(e[0].parsedUrl.path),n=r==null?void 0:r.url.path;if(!e.every(t=>{const s=f(t.parsedUrl.path);return(s==null?void 0:s.url.path)===n}))throw new y(`${a}:invalid-parameters`,"'layers' array should only contain layers or tables that belong to the same feature service")}async function ne(e){D(e,m),await Promise.all(e.map(a=>a.load()));for(const a of e)N(a,m,v);se(e,m),U(e,m)}async function oe(e,a){let r=0,n=0;for(const{isTable:s}of a)s?n++:r++;const l=a[0].parsedUrl.path,t=f(l);if(e.url=(t==null?void 0:t.serverType)==="FeatureServer"?t.url.path:l,e.title||(e.title=t.title),e.extent=null,r>0){const s=a.map(o=>o.fullExtent).filter(_).reduce((o,i)=>o.clone().union(i));s&&(e.extent=await x(s))}I(e,c.METADATA),$(e,c.MULTI_LAYER,a.length>1),$(e,c.SINGLE_LAYER,a.length===1),$(e,c.TABLE,n>0&&r===0),E(e)}async function he(e,a){return G({layer:e,itemType:h,validateLayer:v,createItemData:(r,n)=>J(n,[r]),errorNamePrefix:H},a)}async function we(e,a){await re(e);const r=e[0].portalItem,n=g(r),l=await Promise.all(e.map(s=>P(s,n,a))),t=await J(r,e.map((s,o)=>({layer:s,layerJSON:l[o]})));return E(r),await r.update({data:t}),await Promise.all(e.slice(1).map(s=>s.portalItem.reload())),A(n),r.clone()}async function ve(e,a,r){return k({layer:e,itemType:h,validateLayer:v,createItemData:(n,l)=>Promise.resolve(F(n)),errorNamePrefix:Q,newItem:a,setItemProperties:te},r)}async function $e(e,a,r){await ne(e);const n=z({itemType:h,errorNamePrefix:m,newItem:a}),l=g(n),t=await Promise.all(e.map(o=>P(o,l,r))),s=await M(e.map((o,i)=>({layer:o,layerJSON:t[i]})));await oe(n,e),await j(n,s,r);for(const o of e)o.portalItem=n.clone();return A(l),n}export{he as save,we as saveAll,$e as saveAllAs,ve as saveAs};

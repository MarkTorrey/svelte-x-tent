import{ah as m,gp as p,bA as l}from"./index-Cek7aMWl.js";import{t as j}from"./query-Dg0JyN0I.js";import{d as R}from"./FeatureSet-ClbNh9OS.js";import{d as f}from"./RelationshipQuery-CWq1d8EN.js";import"./pbfQueryUtils-D7UGG6Td.js";import"./pbf-CEYKCTdB.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-BXApFFgO.js";function b(r,t){const e=r.toJSON();return e.objectIds&&(e.objectIds=e.objectIds.join(",")),e.orderByFields&&(e.orderByFields=e.orderByFields.join(",")),e.outFields&&!(t!=null&&t.returnCountOnly)?e.outFields.includes("*")?e.outFields="*":e.outFields=e.outFields.join(","):delete e.outFields,e.outSR&&(e.outSR=p(e.outSR)),e.dynamicDataSource&&(e.layer=JSON.stringify({source:e.dynamicDataSource}),delete e.dynamicDataSource),e}async function h(r,t,e){const a=await y(r,t,e),o=a.data,s=o.geometryType,n=o.spatialReference,d={};for(const c of o.relatedRecordGroups){const u={fields:void 0,objectIdFieldName:void 0,geometryType:s,spatialReference:n,hasZ:!!o.hasZ,hasM:!!o.hasM,features:c.relatedRecords};if(c.objectId!=null)d[c.objectId]=u;else for(const i of Object.keys(c))i!=="relatedRecords"&&(d[c[i]]=u)}return{...a,data:d}}async function F(r,t,e){const a=await y(r,t,e,{returnCountOnly:!0}),o=a.data,s={};for(const n of o.relatedRecordGroups)n.objectId!=null&&(s[n.objectId]=n.count);return{...a,data:s}}async function y(r,t,e={},a){const o=j({...r.query,f:"json",...a,...b(t,a)});return m(r.path+"/queryRelatedRecords",{...e,query:{...e.query,...o}})}async function J(r,t,e){t=f.from(t);const a=l(r);return h(a,t,e).then(o=>{const s=o.data,n={};return Object.keys(s).forEach(d=>n[d]=R.fromJSON(s[d])),n})}async function k(r,t,e){t=f.from(t);const a=l(r);return F(a,t,{...e}).then(o=>o.data)}export{J as executeRelationshipQuery,k as executeRelationshipQueryForCount};

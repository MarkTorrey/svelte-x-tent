import{fb as $,fc as w,aZ as I,dG as b,c7 as f,fg as T,fh as O,O as g,b3 as E,fi as M,fj as R,s as v,g as j,l as s,m as p,fk as x,bq as F,bi as L,n as P,bk as q,ff as J}from"./index-eSY5-lt-.js";import{m as N}from"./MultiOriginJSONSupport-vWhNPmo6.js";import{i as U}from"./APIKeyMixin-D4ISDt7k.js";import{E as k,f as A,X as _}from"./SublayersOwner-O7YF4mqG.js";import{l as V}from"./ArcGISService-ZNLoHKjp.js";import{o as Z}from"./CustomParametersMixin-2_75FyjW.js";import{u as z}from"./OperationalLayer-3ukEE_2z.js";import{j as G}from"./PortalLayer-rHgWFtbi.js";import{f as B}from"./RefreshableLayer-7Vl73DRX.js";import{a as C}from"./TemporalLayer-VuhNqDWS.js";import{d as D}from"./commonProperties-Z7yNesJQ.js";import{m as H}from"./ExportImageParameters-MtrtdR6K.js";import{t as K}from"./imageBitmapUtils-LzEc1H3Y.js";import{e as S}from"./sublayerUtils-TUwx3ufc.js";import{e as W}from"./versionUtils-Cut1eB_D.js";import"./Version-DuGO31mq.js";import"./portalItemUtils-svYaQgLA.js";import"./UniqueValueRenderer-hljh8Sos.js";import"./LegendOptions-x-5oaDqO.js";import"./diffUtils-x5OXhJZZ.js";import"./SizeVariable-221gAT5i.js";import"./colorRamps-rojoPCoV.js";import"./ColorStop-y1faJUUg.js";import"./jsonUtils-1IxKPsH1.js";import"./styleUtils-BMYfqyTs.js";import"./jsonUtils-M3inctU9.js";import"./DictionaryLoader-W3_-N3pK.js";import"./LRUCache-mFQSPLKh.js";import"./FieldsIndex-_W1Us-oq.js";import"./UnknownTimeZone-iVS1S_Kf.js";import"./heatmapUtils-QdzYLNxE.js";import"./QueryTask-2M7S87kN.js";import"./executeForIds-P5YhE_MJ.js";import"./query-ROhOLudR.js";import"./pbfQueryUtils-HEDqsMMp.js";import"./pbf-L_JjT3GM.js";import"./OptimizedGeometry-CbNXANBG.js";import"./OptimizedFeature-5RGb7-P9.js";import"./OptimizedFeatureSet-smVI1ez9.js";import"./queryZScale-ye882EvB.js";import"./executeQueryJSON-6B7-53C9.js";import"./FeatureSet-mcxSPZVd.js";import"./executeQueryPBF-Rksq-B8Z.js";import"./featureConversionUtils-91rcTs0M.js";import"./FeatureType-iHKb3B35.js";import"./FeatureTemplate-w67ep4V4.js";import"./LabelClass-Ii0xtB2a.js";import"./labelUtils-x_C8o7Up.js";import"./defaults--brCOrwa.js";import"./defaultsJSON-x-mq3Ho7.js";import"./labelingInfo-Ik6k9hmR.js";import"./LayerFloorInfo-AjANTfIZ.js";import"./serviceCapabilitiesUtils-PyTiHyo_.js";import"./AttachmentQuery-R-ww4TCj.js";import"./popupUtils-7Uqan4_S.js";let i=class extends $(C(w(k(A(V(z(G(N(B(U(Z(J)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}load(e){const o=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(I).then(()=>this._fetchService(o))),Promise.resolve(this)}readImageFormat(e,o){const m=o.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,o,m,t){var h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;n=S(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");n=S(a,c.sublayers,b(c.origin))}}const l=[],y={writeSublayerStructure:n,...t};let d=n;a.forEach(r=>{const c=r.write({},y);l.push(c),d=d||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(o.layers=l),d&&(o.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,o,m,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new H({layer:this,floors:t==null?void 0:t.floors,scale:T({extent:e,width:o})*a}),l=n.toJSON();n.destroy();const y=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},d=e==null?void 0:e.spatialReference,h=O(d);l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:o+","+m,...l,...y,...r}}async fetchImage(e,o,m,t){const{data:a}=await this._fetchImage("image",e,o,m,t);return a}async fetchImageBitmap(e,o,m,t){const{data:a,url:n}=await this._fetchImage("blob",e,o,m,t);return K(a,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const o={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,o),{extent:t,fullExtent:a,timeExtent:n}=m,l=t||a;return{fullExtent:l&&E.fromJSON(l),timeExtent:n&&M.fromJSON({start:n[0],end:n[1]})}}loadAll(){return R(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return W(this,e)}async _fetchImage(e,o,m,t,a){var y,d,h;const n={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(o,m,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((y=n.query)==null?void 0:y.dynamicLayers)!=null&&!((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:r}=await g(l,n);return{data:r,url:l}}catch(r){throw j(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:o,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=o,this.read(o,{origin:"service",url:this.parsedUrl})}};s([p(x("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),s([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([p()],i.prototype,"dpi",void 0),s([p()],i.prototype,"gdbVersion",void 0),s([p()],i.prototype,"imageFormat",void 0),s([F("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([p()],i.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([p(x("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),s([p()],i.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([L("sublayers",{layers:{type:[_]},visibleLayers:{type:[q]}})],i.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([p(D)],i.prototype,"url",void 0),i=s([P("esri.layers.MapImageLayer")],i);const Qe=i;export{Qe as default};

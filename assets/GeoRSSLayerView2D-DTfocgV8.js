import{Z as l,$ as h,a0 as g,a1 as f,W as w,Y as d}from"./index-BdDnxAOC.js";import{t as u,p as n}from"./jsonUtils-B03p0wkk.js";import{d as V}from"./FeatureSet-BSxK7X-2.js";import{j as b}from"./LayerView2D-C4DUwP3E.js";import{t as S}from"./GraphicContainer-D_BrvAv9.js";import{F as _}from"./GraphicsView2D-CJbb9JQt.js";import{y as T}from"./LayerView-C8i47HwB.js";import"./UniqueValueRenderer-BWPFapkt.js";import"./ColorStop-D1flJukn.js";import"./colorRamps-feXPP0Fe.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-CGgEbm3F.js";import"./jsonUtils-DM4hoWoB.js";import"./defaults-BX3STjdr.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-D8VmJ7nq.js";import"./LRUCache-CSFO1iZh.js";import"./FieldsIndex-DdufUIvd.js";import"./UnknownTimeZone-CDnwrDVp.js";import"./OverrideHelper-cJgBvMlU.js";import"./colorUtils-CXI_GYiL.js";import"./utils-DpS7XCOa.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-BIIdN1xY.js";import"./heatmapUtils-BQROikav.js";import"./Container-C3Ew2ox5.js";import"./EffectView-CEbLCWgX.js";import"./AGraphicContainer-Cghh_e-f.js";import"./TechniqueInstance-C7tjEbHB.js";import"./UpdateTracking2D-i6Vln34G.js";import"./BindType-BmZEZMMh.js";import"./Util-CMsZAslL.js";import"./Program-BEbyLHne.js";import"./BufferObject-CMCaTtYE.js";import"./LabelMetric-CP2ejxD5.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-Tk_OBeCC.js";import"./TileContainer-CAeBc3OW.js";import"./WGLContainer-DzTbsEWo.js";import"./VertexArrayObject-BNd6u6rq.js";import"./ProgramTemplate-Dwf_s9I8.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-BTt_i6C1.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./featureConversionUtils-BCh95FQm.js";import"./OptimizedFeature-6cJ-QFG5.js";import"./OptimizedGeometry-BF8iz5FO.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./FeatureCommandQueue-WSFqrkMp.js";import"./CIMSymbolHelper-vq9rAQVS.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-CiOfLTjw.js";import"./GeometryUtils-gjMcVHTd.js";import"./Rect-CUzevAry.js";import"./constants-F8oTIn7N.js";import"./AttributeStore-vJIDWxy-.js";import"./TimeOnly-Ck8NzzKB.js";import"./centroid-DdLmOD72.js";import"./labelUtils-CE2jIVKQ.js";import"./queryUtils-DQi3qLST.js";import"./json-Wa8cmqdu.js";import"./timeSupport-BTKC7S1J.js";import"./normalizeUtilsSync-Chqxc3Gu.js";let y=class extends b(T){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(t,o){if(!this.graphicsViews.length)return null;const e=this.layer;return this.graphicsViews.reverse().flatMap(r=>{const i=this._popupTemplates.get(r),s=r.hitTest(t);for(const p of s)p.layer=e,p.sourceLayer=e,p.popupTemplate=i;return s}).map(r=>({type:"graphic",graphic:r,layer:e,mapPoint:t}))}update(t){if(this.graphicsViews)for(const o of this.graphicsViews)o.processUpdate(t)}attach(){this.addAttachHandles([l(()=>{var t;return(t=this.layer)==null?void 0:t.featureCollections},t=>{this._clear();for(const{popupInfo:o,featureSet:e,layerDefinition:r}of t){const i=V.fromJSON(e),s=new g(i.features),p=r.drawingInfo,c=o?f.fromJSON(o):null,m=u(p.renderer),a=new _({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:s,renderer:m,container:new S(this.view.featuresTilingScheme)});this._graphicsViewMap[i.geometryType]=a,this._popupTemplates.set(a,c),i.geometryType!=="polygon"||this.layer.polygonSymbol?i.geometryType!=="polyline"||this.layer.lineSymbol?i.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=m.symbol):this.layer.lineSymbol=m.symbol:this.layer.polygonSymbol=m.symbol,this.graphicsViews.push(a),this.container.addChild(a.container)}},h),l(()=>{var t;return(t=this.layer)==null?void 0:t.polygonSymbol},t=>{this._graphicsViewMap.polygon.renderer=new n({symbol:t})},h),l(()=>{var t;return(t=this.layer)==null?void 0:t.lineSymbol},t=>{this._graphicsViewMap.polyline.renderer=new n({symbol:t})},h),l(()=>{var t;return(t=this.layer)==null?void 0:t.pointSymbol},t=>{this._graphicsViewMap.point.renderer=new n({symbol:t})},h)])}detach(){this._clear()}moveEnd(){}viewChange(){for(const t of this.graphicsViews)t.viewChange()}_clear(){this.container.removeAllChildren();for(const t of this.graphicsViews)t.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};y=w([d("esri.views.2d.layers.GeoRSSLayerView2D")],y);const It=y;export{It as default};

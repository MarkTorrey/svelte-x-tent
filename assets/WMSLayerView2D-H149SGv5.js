import{l as a,m as n,n as I,u as M,s as l,g as C,k as E,o as R,b3 as $}from"./index-eSY5-lt-.js";import{a as b}from"./BitmapContainer-zXpYCSDr.js";import{m as q}from"./LayerView2D-fHeQM5c3.js";import{v as U}from"./ExportStrategy-yriiTTrK.js";import{u as V}from"./LayerView-CRo_qb-x.js";import{a as W}from"./RefreshableLayerView-FnCvUyzs.js";import{j as L}from"./commonProperties-Z7yNesJQ.js";import{o as j}from"./ExportWMSImageParameters-DLrgEwpl.js";import"./WGLContainer-NUKBXko_.js";import"./definitions-otzk_d_r.js";import"./FramebufferObject-FWwprw92.js";import"./Texture-4vQG0qLG.js";import"./enums-8pc8f5Ge.js";import"./VertexArrayObject-whl5pCEr.js";import"./VertexElementDescriptor-0hGjloLE.js";import"./vec4f32-NvfHy9q7.js";import"./color-Y1HD3ytM.js";import"./enums--FbEXJ87.js";import"./number-sTjsTbdA.js";import"./ProgramTemplate-mAY_399P.js";import"./GeometryUtils-PBUEihia.js";import"./alignmentUtils-XT3TYmYW.js";import"./heatmapUtils-QdzYLNxE.js";import"./StyleDefinition-ohiNeWtS.js";import"./config-z2KFXUcx.js";import"./Container-AO0ma2pG.js";import"./EffectView-eHJp2ynv.js";import"./earcut-wP_5WnqY.js";import"./featureConversionUtils-91rcTs0M.js";import"./OptimizedFeature-5RGb7-P9.js";import"./OptimizedFeatureSet-smVI1ez9.js";import"./OptimizedGeometry-CbNXANBG.js";import"./Bitmap-Qg1VS7OT.js";const H=e=>{let t=class extends e{initialize(){this.exportImageParameters=new j({layer:this.layer})}destroy(){this.exportImageParameters=M(this.exportImageParameters)}get exportImageVersion(){var r;return(r=this.exportImageParameters)==null||r.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}fetchPopupFeatures(r){const{layer:o}=this;if(!r)return Promise.reject(new l("wmslayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:o}));const{popupEnabled:p}=o;if(!p)return Promise.reject(new l("wmslayerview:fetchPopupFeatures","popupEnabled should be true",{popupEnabled:p}));const u=this.createFetchPopupFeaturesQuery(r);if(!u)return Promise.resolve([]);const{extent:i,width:s,height:m,x:d,y:c}=u;if(!(i&&s&&m))throw new l("wmslayerview:fetchPopupFeatures","WMSLayer does not support fetching features.",{extent:i,width:s,height:m});return o.fetchFeatureInfo(i,s,m,d,c)}};return a([n()],t.prototype,"exportImageParameters",void 0),a([n({readOnly:!0})],t.prototype,"exportImageVersion",null),a([n()],t.prototype,"layer",void 0),a([n(L)],t.prototype,"timeExtent",void 0),t=a([I("esri.layers.mixins.WMSLayerView")],t),t};let h=class extends H(W(q(V))){constructor(){super(...arguments),this.bitmapContainer=new b}supportsSpatialReference(e){return this.layer.serviceSupportsSpatialReference(e)}update(e){this.strategy.update(e).catch(t=>{C(t)||E.getLogger(this).error(t)})}attach(){const{layer:e}=this,{imageMaxHeight:t,imageMaxWidth:r}=e;this.bitmapContainer=new b,this.container.addChild(this.bitmapContainer),this.strategy=new U({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:t,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=M(this.strategy),this.container.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(e){const{view:t,bitmapContainer:r}=this,{x:o,y:p}=e,{spatialReference:u}=t;let i,s=0,m=0;if(r.children.some(F=>{const{width:x,height:f,resolution:w,x:y,y:g}=F,v=y+w*x,P=g-w*f;return o>=y&&o<=v&&p<=g&&p>=P&&(i=new $({xmin:y,ymin:P,xmax:v,ymax:g,spatialReference:u}),s=x,m=f,!0)}),!i)return null;const d=i.width/s,c=Math.round((o-i.xmin)/d),S=Math.round((i.ymax-p)/d);return{extent:i,width:s,height:m,x:c,y:S}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,r,o){return this.layer.fetchImageBitmap(e,t,r,{timeExtent:this.timeExtent,...o})}};a([n()],h.prototype,"strategy",void 0),a([n()],h.prototype,"updating",void 0),h=a([I("esri.views.2d.layers.WMSLayerView2D")],h);const xt=h;export{xt as default};

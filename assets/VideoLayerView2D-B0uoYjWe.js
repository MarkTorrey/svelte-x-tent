import{bx as g,aQ as d,k as t,l as r,m as f,bf as b,q as n,u as c,n as h,P as y}from"./index-rwr9l75y.js";import{h as T}from"./GraphicsLayer-do1sCuA6.js";import{m as _,u as v}from"./LayerView-SN8Ya_ml.js";import{i as O}from"./GraphicContainer-GliTMIkB.js";import{r as C}from"./GraphicsView2D-L3UlZANi.js";import"./BlendLayer-3kNYNVFw.js";import"./jsonUtils-0YRyalyT.js";import"./parser-WHTFD6Ot.js";import"./ScaleRangeLayer-xyAAcj00.js";import"./ElevationInfo-sf5mgUmK.js";import"./lengthUtils-fNXXQLZy.js";import"./Container-m-X2DGFy.js";import"./definitions--BerIEB0.js";import"./enums-8pc8f5Ge.js";import"./Texture-IITjQftW.js";import"./color-MSA9vB2T.js";import"./enums--FbEXJ87.js";import"./VertexElementDescriptor-0hGjloLE.js";import"./BaseGraphicContainer-nkQkRClz.js";import"./FeatureContainer-sCP9pctf.js";import"./AttributeStoreView-2GRDdbO8.js";import"./TiledDisplayObject-NTAr5tsC.js";import"./diffUtils-g7Fohb1Y.js";import"./labelingInfo-l9wgedMn.js";import"./LabelClass-V8j5wui3.js";import"./labelUtils-JUCMTUQJ.js";import"./defaultsJSON-HVtDPFXZ.js";import"./jsonUtils-1tkaaT9f.js";import"./WGLContainer-RWXnfBYU.js";import"./FramebufferObject-xhcDpZRj.js";import"./ProgramTemplate-drETQBUn.js";import"./GeometryUtils-pN0lJOJH.js";import"./heatmapUtils-y_chVdwW.js";import"./StyleDefinition-ohiNeWtS.js";import"./config-z2KFXUcx.js";import"./earcut-6aBD8Ssv.js";import"./featureConversionUtils-FNM6dcN0.js";import"./OptimizedGeometry-1RFAES06.js";import"./OptimizedFeatureSet-smVI1ez9.js";import"./visualVariablesUtils-ftjXEZ2Y.js";import"./ExpandedCIM-r039T5K9.js";import"./BidiEngine-8z8MVveq.js";import"./GeometryUtils-CEMOhUyj.js";import"./utils-8dHEt1x_.js";import"./Rect-pT1ASav_.js";import"./quantizationUtils-Us5VtfAD.js";import"./floatRGBA-Y0kA9R7X.js";import"./clusterUtils-CpC7FOKC.js";import"./MD5-uECS9GB-.js";import"./SizeVariable-Ekg0XaNX.js";import"./colorRamps-awdEZ3u_.js";import"./LegendOptions-E7OIex9R.js";import"./util-PmijqwOP.js";import"./TileContainer-941YHDRa.js";import"./vec3f32-6rWBPTzX.js";import"./normalizeUtilsSync-UY7exMMQ.js";import"./projectionSupport-hu9_r6iQ.js";import"./json-v6EOeNTY.js";import"./Matcher-5VzK9-Dg.js";import"./tileUtils-pcBJnprf.js";import"./TurboLine-w-LQISZ9.js";import"./LRUCache-9CocD9iD.js";import"./ComputedAttributeStorage-puCMOryp.js";import"./FieldsIndex-PWGCOsyk.js";import"./UnknownTimeZone-jfi9eEf7.js";import"./TimeOnly-ZwWj2Vlb.js";let a=class extends g(d){constructor(e){super(e),this.frameCenter=null,this.frameOutline=null,this.lineOfSight=null,this.sensorLocation=null,this.sensorTrail=null}};t([r({type:Boolean})],a.prototype,"frameCenter",void 0),t([r({type:Boolean})],a.prototype,"frameOutline",void 0),t([r({type:Boolean})],a.prototype,"lineOfSight",void 0),t([r({type:Boolean})],a.prototype,"sensorLocation",void 0),t([r({type:Boolean})],a.prototype,"sensorTrail",void 0),a=t([f("esri.layers.support.TelemetryDisplay")],a);const u=a,p=new b([255,127,0]);let m=class extends _(v){constructor(){super(...arguments),this._graphicsLayer=new T,this._frameOutlineGraphic=new n({symbol:{type:"simple-fill",outline:{type:"simple-line",color:p}}}),this._sensorTrailGraphic=new n({symbol:{type:"simple-line",color:p}}),this._lineOfSightGraphic=new n({symbol:{type:"simple-line",color:p}}),this._sensorLocationGraphic=new n({symbol:{type:"simple-marker",color:p}}),this._frameCenterGraphic=new n({symbol:{type:"simple-marker",color:p}}),this.layer=null,this.symbolColor=p,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=c(this._graphicsLayer)}initialize(){var e,i,s,l,o;this.addHandles(h(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},y)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new u({frameCenter:((e=this.layer.telemetryDisplay)==null?void 0:e.frameCenter)??!0,frameOutline:((i=this.layer.telemetryDisplay)==null?void 0:i.frameOutline)??!0,lineOfSight:((s=this.layer.telemetryDisplay)==null?void 0:s.lineOfSight)??!0,sensorLocation:((l=this.layer.telemetryDisplay)==null?void 0:l.sensorLocation)??!0,sensorTrail:((o=this.layer.telemetryDisplay)==null?void 0:o.sensorTrail)??!0})}attach(){this.graphicsView=new C({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new O(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([h(()=>{var e,i,s,l,o;return[(e=this.layer.telemetryDisplay)==null?void 0:e.frameCenter,(i=this.layer.telemetryDisplay)==null?void 0:i.frameOutline,(s=this.layer.telemetryDisplay)==null?void 0:s.sensorLocation,(l=this.layer.telemetryDisplay)==null?void 0:l.sensorTrail,(o=this.layer.telemetryDisplay)==null?void 0:o.lineOfSight]},()=>this._updateVisibleTelemetryElements(),y),h(()=>{var e,i,s,l,o;return[this.layer.telemetry,(e=this.visibleTelemetryElements)==null?void 0:e.frameCenter,(i=this.visibleTelemetryElements)==null?void 0:i.frameOutline,(s=this.visibleTelemetryElements)==null?void 0:s.sensorLocation,(l=this.visibleTelemetryElements)==null?void 0:l.sensorTrail,(o=this.visibleTelemetryElements)==null?void 0:o.lineOfSight]},()=>this._updateGraphicGeometries(),y)])}detach(){this.container.removeAllChildren(),this.graphicsView=c(this.graphicsView)}supportsSpatialReference(e){return!0}moveStart(){}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(e){this.graphicsView.processUpdate(e)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:e}=this.layer,{visibleTelemetryElements:i}=this;e&&i&&(i.frameOutline&&e.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,i.sensorTrail&&e.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,i.lineOfSight&&e.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,i.sensorLocation&&e.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,i.frameCenter&&e.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}};t([r()],m.prototype,"graphicsView",void 0),t([r()],m.prototype,"layer",void 0),t([r()],m.prototype,"symbolColor",void 0),t([r({type:u})],m.prototype,"visibleTelemetryElements",void 0),m=t([f("esri.views.2d.layers.VideoLayerView2D")],m);const He=m;export{He as default};

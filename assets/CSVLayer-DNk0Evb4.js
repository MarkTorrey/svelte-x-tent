import{k as i,l as r,m,fx as v,eI as w,b6 as S,eo as O,C as b,bl as F,dB as I,fy as q,bi as N,b0 as _,I as C,s as h}from"./index-rwr9l75y.js";import J from"./FeatureLayer-4rjmbq6O.js";import{d as x}from"./FeatureSet-2nxwJf8L.js";import{l as P}from"./clientSideDefaults-JbC09As3.js";import{b as l}from"./Query-xcVNMwFB.js";import"./UniqueValueRenderer-vpcJI4tu.js";import"./LegendOptions-E7OIex9R.js";import"./diffUtils-g7Fohb1Y.js";import"./SizeVariable-Ekg0XaNX.js";import"./colorRamps-awdEZ3u_.js";import"./lengthUtils-fNXXQLZy.js";import"./ColorStop-hqYqJZzQ.js";import"./jsonUtils-1tkaaT9f.js";import"./styleUtils-u-o4YNNJ.js";import"./jsonUtils-E5tmSupD.js";import"./DictionaryLoader-uaxQVTqz.js";import"./LRUCache-9CocD9iD.js";import"./Version-VeHGbusC.js";import"./FieldsIndex-PWGCOsyk.js";import"./UnknownTimeZone-jfi9eEf7.js";import"./heatmapUtils-y_chVdwW.js";import"./MultiOriginJSONSupport-2V-G1xbs.js";import"./commonProperties-K0LcbBkz.js";import"./ElevationInfo-sf5mgUmK.js";import"./FeatureLayerBase-QJ-LJX0M.js";import"./Field-BSvFaGGy.js";import"./fieldType-3gjYBYno.js";import"./featureLayerUtils-5SK4-bW3.js";import"./AttachmentQuery-mNo7qWQD.js";import"./RelationshipQuery-Rjgxs11T.js";import"./LayerFloorInfo-HyJxw1xl.js";import"./serviceCapabilitiesUtils-OTnU9eU9.js";import"./editsZScale-BeSQZuaR.js";import"./queryZScale-EIbHvUEY.js";import"./APIKeyMixin-dy0QiC8S.js";import"./ArcGISService-vs3FBQvR.js";import"./BlendLayer-3kNYNVFw.js";import"./jsonUtils-0YRyalyT.js";import"./parser-WHTFD6Ot.js";import"./CustomParametersMixin-PFAUWQha.js";import"./EditBusLayer-BnK4DbeP.js";import"./FeatureEffectLayer-EAseW86J.js";import"./FeatureEffect-hNFu_4zx.js";import"./FeatureReductionLayer-QqVOFpxL.js";import"./clusterUtils-CpC7FOKC.js";import"./MD5-uECS9GB-.js";import"./FeatureReductionSelection-mFV-c50N.js";import"./LabelClass-V8j5wui3.js";import"./labelUtils-JUCMTUQJ.js";import"./defaultsJSON-HVtDPFXZ.js";import"./OperationalLayer-1-FtoNGP.js";import"./OrderedLayer-8i5R7tzA.js";import"./PortalLayer-_Q57Kb8E.js";import"./portalItemUtils-hm4FAu7j.js";import"./RefreshableLayer-PTSrPNGJ.js";import"./ScaleRangeLayer-xyAAcj00.js";import"./TemporalLayer-6cXUqjfc.js";import"./FeatureTemplate-OHAm9Vc6.js";import"./FeatureType-jv7ahdQ_.js";import"./fieldProperties-A_lnIwNt.js";import"./labelingInfo-l9wgedMn.js";import"./versionUtils-qfWN2_GX.js";import"./styleUtils-Bp-u3KAs.js";import"./TopFeaturesQuery-DVolXONq.js";import"./popupUtils-WKtLoZyd.js";import"./interfaces-JKqm7GXy.js";import"./QueryEngineCapabilities-PzVpW5yD.js";let a=class extends v{constructor(t){super(t),this.type="csv",this.refresh=w(async e=>{await this.load();const{extent:o,timeExtent:n}=await this._connection.invoke("refresh",e);return o&&(this.sourceJSON.extent=o),n&&(this.sourceJSON.timeInfo.timeExtent=[n.start,n.end]),{dataChanged:!0,updates:{extent:this.sourceJSON.extent,timeInfo:this.sourceJSON.timeInfo}}})}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this._startWorker(e)),Promise.resolve(this)}destroy(){var t;(t=this._connection)==null||t.close(),this._connection=null}async openPorts(){return await this.load(),this._connection.openPorts()}async queryFeatures(t,e={}){await this.load(e);const o=await this._connection.invoke("queryFeatures",t?t.toJSON():null,e);return x.fromJSON(o)}async queryFeaturesJSON(t,e={}){return await this.load(e),this._connection.invoke("queryFeatures",t?t.toJSON():null,e)}async queryFeatureCount(t,e={}){return await this.load(e),this._connection.invoke("queryFeatureCount",t?t.toJSON():null,e)}async queryObjectIds(t,e={}){return await this.load(e),this._connection.invoke("queryObjectIds",t?t.toJSON():null,e)}async queryExtent(t,e={}){await this.load(e);const o=await this._connection.invoke("queryExtent",t?t.toJSON():null,e);return{count:o.count,extent:S.fromJSON(o.extent)}}async querySnapping(t,e={}){return await this.load(e),this._connection.invoke("querySnapping",t,e)}async _startWorker(t){this._connection=await O("CSVSourceWorker",{strategy:b("feature-layers-workers")?"dedicated":"local",signal:t,registryTarget:this});const{url:e,delimiter:o,fields:n,latitudeField:y,longitudeField:f,spatialReference:p,timeInfo:u}=this.loadOptions,d=await this._connection.invoke("load",{url:e,customParameters:this.customParameters,parsingOptions:{delimiter:o,fields:n==null?void 0:n.map(g=>g.toJSON()),latitudeField:y,longitudeField:f,spatialReference:p==null?void 0:p.toJSON(),timeInfo:u==null?void 0:u.toJSON()}},{signal:t});this.locationInfo=d.locationInfo,this.sourceJSON=d.layerDefinition,this.delimiter=d.delimiter}};i([r()],a.prototype,"type",void 0),i([r()],a.prototype,"loadOptions",void 0),i([r()],a.prototype,"customParameters",void 0),i([r()],a.prototype,"locationInfo",void 0),i([r()],a.prototype,"sourceJSON",void 0),i([r()],a.prototype,"delimiter",void 0),a=i([m("esri.layers.graphics.sources.CSVSource")],a);function c(t,e){throw new h(e,`CSVLayer (title: ${t.title}, id: ${t.id}) cannot be saved to a portal item`)}let s=class extends J{constructor(...t){super(...t),this.geometryType="point",this.capabilities=P(!1,!1),this.delimiter=null,this.editingEnabled=!1,this.fields=null,this.latitudeField=null,this.locationType="coordinates",this.longitudeField=null,this.operationalLayerType="CSV",this.outFields=["*"],this.path=null,this.spatialReference=N.WGS84,this.source=null,this.type="csv"}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null,o=this.loadFromPortal({supportedTypes:["CSV"],supportsData:!1},t).catch(_).then(async()=>this.initLayerProperties(await this.createGraphicsSource(e)));return this.addResolvingPromise(o),Promise.resolve(this)}get isTable(){return this.loaded&&this.geometryType==null}readWebMapLabelsVisible(t,e){var o,n;return e.showLabels!=null?e.showLabels:!!((n=(o=e.layerDefinition)==null?void 0:o.drawingInfo)!=null&&n.labelingInfo)}set url(t){if(!t)return void this._set("url",t);const e=C(t);this._set("url",e.path),e.query&&(this.customParameters={...this.customParameters,...e.query})}async createGraphicsSource(t){const e=new a({loadOptions:{delimiter:this.delimiter,fields:this.fields,latitudeField:this.latitudeField??void 0,longitudeField:this.longitudeField??void 0,spatialReference:this.spatialReference??void 0,timeInfo:this.timeInfo??void 0,url:this.url},customParameters:this.customParameters??void 0});return this._set("source",e),await e.load({signal:t}),this.read({locationInfo:e.locationInfo,columnDelimiter:e.delimiter},{origin:"service",url:this.parsedUrl}),e}queryFeatures(t,e){return this.load().then(()=>this.source.queryFeatures(l.from(t)||this.createQuery())).then(o=>{if(o!=null&&o.features)for(const n of o.features)n.layer=n.sourceLayer=this;return o})}queryObjectIds(t,e){return this.load().then(()=>this.source.queryObjectIds(l.from(t)||this.createQuery()))}queryFeatureCount(t,e){return this.load().then(()=>this.source.queryFeatureCount(l.from(t)||this.createQuery()))}queryExtent(t,e){return this.load().then(()=>this.source.queryExtent(l.from(t)||this.createQuery()))}read(t,e){super.read(t,e),e&&e.origin==="service"&&this.revert(["latitudeField","longitudeField"],"service")}write(t,e){return super.write(t,{...e,writeLayerSchema:!0})}clone(){throw new h("csv-layer:clone",`CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`)}async save(t){return c(this,"csv-layer:save")}async saveAs(t,e){return c(this,"csv-layer:save-as")}async hasDataChanged(){try{const{dataChanged:t,updates:e}=await this.source.refresh(this.customParameters);return e!=null&&this.read(e,{origin:"service",url:this.parsedUrl,ignoreDefaults:!0}),t}catch{}return!1}_verifyFields(){}_verifySource(){}_hasMemorySource(){return!1}};i([r({readOnly:!0,json:{read:!1,write:!1}})],s.prototype,"capabilities",void 0),i([r({type:[","," ",";","|","	"],json:{read:{source:"columnDelimiter"},write:{target:"columnDelimiter",ignoreOrigin:!0}}})],s.prototype,"delimiter",void 0),i([r({readOnly:!0,type:Boolean,json:{origins:{"web-scene":{read:!1,write:!1}}}})],s.prototype,"editingEnabled",void 0),i([r({json:{read:{source:"layerDefinition.fields"},write:{target:"layerDefinition.fields"}}})],s.prototype,"fields",void 0),i([r({type:Boolean,readOnly:!0})],s.prototype,"isTable",null),i([F("web-map","labelsVisible",["layerDefinition.drawingInfo.labelingInfo","showLabels"])],s.prototype,"readWebMapLabelsVisible",null),i([r({type:String,json:{read:{source:"locationInfo.latitudeFieldName"},write:{target:"locationInfo.latitudeFieldName",ignoreOrigin:!0}}})],s.prototype,"latitudeField",void 0),i([r({type:["show","hide"]})],s.prototype,"listMode",void 0),i([r({type:["coordinates"],json:{read:{source:"locationInfo.locationType"},write:{target:"locationInfo.locationType",ignoreOrigin:!0,isRequired:!0}}})],s.prototype,"locationType",void 0),i([r({type:String,json:{read:{source:"locationInfo.longitudeFieldName"},write:{target:"locationInfo.longitudeFieldName",ignoreOrigin:!0}}})],s.prototype,"longitudeField",void 0),i([r({type:["CSV"]})],s.prototype,"operationalLayerType",void 0),i([r()],s.prototype,"outFields",void 0),i([r({type:String,json:{origins:{"web-scene":{read:!1,write:!1}},read:!1,write:!1}})],s.prototype,"path",void 0),i([r({json:{read:!1},cast:null,type:a,readOnly:!0})],s.prototype,"source",void 0),i([r({json:{read:!1},value:"csv",readOnly:!0})],s.prototype,"type",void 0),i([r({json:{read:I,write:{isRequired:!0,ignoreOrigin:!0,writer:q}}})],s.prototype,"url",null),s=i([m("esri.layers.CSVLayer")],s);const Gt=s;export{Gt as default};

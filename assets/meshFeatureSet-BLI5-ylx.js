import{aq as h,a3 as y,da as S,cc as l,V as g}from"./index-CaKGzNfV.js";import{$ as d}from"./Mesh-cvalG6kk.js";import{i as N,a as D}from"./External-iDGS1ZUj.js";import{s as M}from"./infoFor3D-CxdEiWhp.js";import{d as F}from"./FeatureSet-BSoqABtR.js";import{n as T,i as w}from"./meshFeatureAttributes-BXA9yKyI.js";import"./axisAngleDegrees-DBXqOTI8.js";import"./MeshComponent-B1MTpgFa.js";import"./meshProperties-C4iW0Ukm.js";import"./MeshTransform-D4QBSwl1.js";import"./MeshVertexAttributes-BcgrCUVv.js";import"./triangulationUtils-DijgMkGR.js";import"./earcut-Lltz9D9k.js";import"./Indices-tTCnngdH.js";import"./deduplicate-txA1OSWJ.js";import"./vertexSpaceConversion-C2s5qYIw.js";import"./spatialReferenceEllipsoidUtils-7gfyUPFt.js";import"./computeTranslationToOriginAndRotation-C5ITxglo.js";import"./vec3-V_t_Rpa0.js";import"./BufferView-BnR-WMub.js";import"./vec4-DHJdSNO7.js";const I=()=>g.getLogger("esri.rest.support.meshFeatureSet");function _(t,o,e){const r=e.features;e.features=[],delete e.geometryType;const s=F.fromJSON(e);if(s.geometryType="mesh",!e.assetMaps)return s;const n=b(o,e.assetMaps),i=t.sourceSpatialReference??h.WGS84,p=e.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?L(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const m=O(u,p,i,o,n);s.features.push(new y({geometry:m,attributes:c(u)}))}return s}function L(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const e in o)t.has(e)||delete o[e];return o}}function O(t,o,e,r,s){const n=t.attributes[o],i=s.get(n);if(i==null||!t.geometry)return null;const p=T(t.attributes,e,r.transformFieldRoles),a=S.fromJSON(t.geometry);a.spatialReference=e;const c=w(t.attributes,r.transformFieldRoles),u=e.isGeographic?"local":"georeferenced",m=P(i);return m?d.createWithExternalSource(p,m,{extent:a,transform:c,vertexSpace:u,unitConversionDisabled:!0}):d.createIncomplete(p,{extent:a,transform:c,vertexSpace:u})}var f;function b(t,o){const e=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,p=r.assetHash,a=r.assetURL,c=r.conversionStatus,u=r.seqNo,m=M(i,t.supportedFormats);if(!m){I().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const E=l(e,s,()=>({files:new Map}));l(E.files,n,()=>({name:n,type:i,mimeType:m,status:$(c),parts:[]})).parts[u]={hash:p,url:a}}return e}function P(t){const o=Array.from(t.files.values()),e=new Array;for(const r of o){if(r.status!==f.COMPLETED)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new N(n.url,n.hash))}e.push(new D(r.name,r.mimeType,s))}return e}function $(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{b as assetMapFromAssetMapsJSON,O as extractMesh,_ as meshFeatureSetFromJSON};

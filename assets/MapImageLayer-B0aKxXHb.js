import{gc as $,gd as O,bb as T,el as v,cu as g,go as P,gp as E,ah as f,cx as F,bY as L,gq as M,A as x,R,V as o,W as s,gr as S,bD as N,bF as _,X as j,gs as q,gg as J}from"./index-Cek7aMWl.js";import{S as U}from"./MultiOriginJSONSupport-BlAwjy_L.js";import{i as A}from"./APIKeyMixin-DdhuDYwL.js";import{m as V,f as k,t as z}from"./SublayersOwner-kJu7ornw.js";import{l as D}from"./ArcGISService-CcXrOqVK.js";import{e as W}from"./CustomParametersMixin-DLUUPWS3.js";import{b as Z}from"./OperationalLayer-B-J5coPH.js";import{j as B}from"./PortalLayer-B7KsXAi1.js";import{f as C}from"./RefreshableLayer-CeoHeJiI.js";import{l as G}from"./TemporalLayer-Ba9mHalh.js";import{p as H}from"./commonProperties-DbjJOfHD.js";import{y as K}from"./ExportImageParameters-B9DCnJwi.js";import{t as X}from"./imageBitmapUtils-CNpI-FDC.js";import{e as I}from"./sublayerUtils-CsQjXgeP.js";import{t as Y}from"./versionUtils-CHsRo-RE.js";import"./Version-DJsGRXWf.js";import"./portalItemUtils-BCfDAbUL.js";import"./UniqueValueRenderer-DoQjGRE5.js";import"./ColorStop-CqMXhorb.js";import"./colorRamps-4yJNyWKx.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-Cdb7Kq7r.js";import"./jsonUtils-C2l4B_cE.js";import"./defaults-fOuW8gwA.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-Dv2EsbEO.js";import"./jsonUtils-DGzEHX8a.js";import"./LRUCache-pAqnhOsq.js";import"./FieldsIndex-Bjg3eA_S.js";import"./UnknownTimeZone-Cjv2gi-C.js";import"./OverrideHelper-ClkM4CZ1.js";import"./colorUtils-BlCLzs4t.js";import"./utils-BE8joJvK.js";import"./quantizationUtils-DeBnMDmu.js";import"./heatmapUtils-NTzr8GZp.js";import"./QueryTask-BLYX2f6M.js";import"./infoFor3D-DsOdlPuA.js";import"./executeForIds-DbtIfq3g.js";import"./query-Dg0JyN0I.js";import"./pbfQueryUtils-D7UGG6Td.js";import"./pbf-CEYKCTdB.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-BXApFFgO.js";import"./executeQueryJSON-uMDcT6zK.js";import"./FeatureSet-ClbNh9OS.js";import"./executeQueryPBF-BtoMtVDP.js";import"./featureConversionUtils-DoC7B3A2.js";import"./featureLayerUtils-ChIFdxrX.js";import"./RelationshipQuery-CWq1d8EN.js";import"./FeatureType-CDkdd-Wk.js";import"./FeatureTemplate-CEfaRdgX.js";import"./labelingInfo-xEuuUnSV.js";import"./labelUtils-C4iNx9oT.js";import"./LayerFloorInfo-BFRsBa1U.js";import"./Relationship-AfZQ8hC5.js";import"./serviceCapabilitiesUtils-Bw0rlVLE.js";import"./popupUtils-BYVjdumh.js";import"./TimeInfo-DDzm1g7J.js";let i=class extends $(G(O(V(k(D(Z(B(U(C(A(W(J)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new K({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(T).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,n,t){var l,d,b;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:m})=>m&&m.toArray().reverse()).toArray();let p=!1;const h=v(t.origin);if((l=this.capabilities)!=null&&l.operations.supportsExportMap&&((b=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&b.supportsDynamicLayers)){if(h===g.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;p=I(a,m,g.SERVICE)}else if(h>g.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");p=I(a,m.sublayers,v(m.origin))}}const c=[],u={writeSublayerStructure:p,...t};let y=p||this.hasVisibleLayersForOrigin(h);a.forEach(m=>{const w=m.write({},u);c.push(w),y=y||m.originOf("visible")==="user"}),c.some(m=>Object.keys(m).length>1)&&(r.layers=c),y&&(r.visibleLayers=a.filter(m=>m.visible).map(m=>m.id))}createExportImageParameters(e,r,n,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=P({extent:e,width:r})*a;const p=this._exportImageParameters.toJSON(),h=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,u=E(c);p.dpi*=a;const y={};if(t!=null&&t.timeExtent){const{start:l,end:d}=t.timeExtent.toJSON();y.time=l&&d&&l===d?""+l:`${l??"null"},${d??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:r+","+n,...p,...h,...y}}async fetchImage(e,r,n,t){const{data:a}=await this._fetchImage("image",e,r,n,t);return a}async fetchImageBitmap(e,r,n,t){const{data:a,url:p}=await this._fetchImage("blob",e,r,n,t);return X(a,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await f(this.url,r),{extent:t,fullExtent:a,timeExtent:p}=n,h=t||a;return{fullExtent:h&&F.fromJSON(h),timeExtent:p&&L.fromJSON({start:p[0],end:p[1]})}}loadAll(){return M(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,r,n,t,a){var c,u,y;const p={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((c=p.query)==null?void 0:c.dynamicLayers)!=null&&!((y=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&y.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:l}=await f(h,p);return{data:l,url:h}}catch(l){throw R(l)?l:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:l})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};o([s(S("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),o([s({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),o([s()],i.prototype,"dpi",void 0),o([s()],i.prototype,"gdbVersion",void 0),o([s()],i.prototype,"imageFormat",void 0),o([N("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),o([s({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),o([s({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),o([s()],i.prototype,"imageTransparency",void 0),o([s({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([s({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),o([s({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([s({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([s(S("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),o([s()],i.prototype,"sourceJSON",void 0),o([s({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),o([_("sublayers",{layers:{type:[z]},visibleLayers:{type:[q]}})],i.prototype,"writeSublayers",null),o([s({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([s({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),o([s(H)],i.prototype,"url",void 0),i=o([j("esri.layers.MapImageLayer")],i);const at=i;export{at as default};

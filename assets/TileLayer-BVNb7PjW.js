import{g8 as _,g9 as S,b$ as T,aq as v,F as b,bJ as u,gA as w,gp as $,B as h,z as O,dA as R,fZ as W,fP as U,W as o,X as a,dk as P,dl as A,gz as j,Y as B,gc as L}from"./index-CaKGzNfV.js";import{S as I}from"./MultiOriginJSONSupport-wpfGcuaM.js";import{i as M}from"./APIKeyMixin-4NXPzKxL.js";import{p as N}from"./ArcGISCachedService-7sTu9jyl.js";import{m as k,f as C,t as D}from"./SublayersOwner-CZCNp-1_.js";import{l as J}from"./ArcGISService-CIYEvotY.js";import{e as q}from"./CustomParametersMixin-CC3E0KP5.js";import{b as G}from"./OperationalLayer-BxkYHBw-.js";import{j as V}from"./PortalLayer-Y0kMRgT_.js";import{f as z}from"./RefreshableLayer-B9kYW8Y5.js";import{y as E}from"./commonProperties-tc18lW15.js";import{o as y}from"./imageBitmapUtils-BoIf1D8n.js";import"./TileInfoTilemapCache-DoEPy8c0.js";import"./TilemapCache-B4MBAT6B.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./LRUCache-BaJSamnL.js";import"./portalItemUtils-TvfzExOC.js";import"./UniqueValueRenderer-BcKHDo_8.js";import"./ColorStop-Ck7LDARl.js";import"./colorRamps-Q60ZSTdL.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-Dirgs_V6.js";import"./jsonUtils-BZkfKxwG.js";import"./defaults-r4nVzw_0.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-m3XI6lz9.js";import"./jsonUtils-BOyZBBAS.js";import"./FieldsIndex-CfsNliOd.js";import"./UnknownTimeZone-D9sfa0VK.js";import"./OverrideHelper-cVV05tA4.js";import"./colorUtils-DyHwYZ1z.js";import"./utils-DKWWfa8p.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-DwrM8is6.js";import"./heatmapUtils-DaJThs33.js";import"./QueryTask-0ZOarOaP.js";import"./infoFor3D-CxdEiWhp.js";import"./executeForIds-B5kJoH-E.js";import"./query-C-nD1xAn.js";import"./pbfQueryUtils-C4K2tL_O.js";import"./pbf-BQKPBNzK.js";import"./OptimizedGeometry-BF8iz5FO.js";import"./OptimizedFeature-6cJ-QFG5.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-CQQRZUh9.js";import"./executeQueryJSON-CYPq97C5.js";import"./FeatureSet-BSoqABtR.js";import"./featureConversionUtils-D2DIJdAd.js";import"./featureLayerUtils-CSNpeKfs.js";import"./FeatureType-lOcvLAbY.js";import"./FeatureTemplate-DyFI_aFR.js";import"./labelingInfo-BiO3-7vh.js";import"./labelUtils-BASd6Ev6.js";import"./LayerFloorInfo-CbnWZ0IJ.js";import"./Relationship-B0a30Iij.js";import"./serviceCapabilitiesUtils-D3fF0Bb2.js";import"./popupUtils-C_GsY4hL.js";import"./sublayerUtils-BRjHkeGi.js";var d;const f=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends _(S(k(N(C(G(V(J(I(z(M(q(L)))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(T).then(()=>this._fetchService(r))),Promise.resolve(this)}get attributionDataUrl(){var r;const e=(r=this.parsedUrl)==null?void 0:r.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){var t;return(e=e||((t=r.tileInfo)==null?void 0:t.spatialReference))&&v.fromJSON(e)}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:l})=>l&&l.toArray().reverse()).toArray(),n=[],c={writeSublayerStructure:!1,...s};p.forEach(l=>{const m=l.write({},c);n.push(m)}),n.some(l=>Object.keys(l).length>1)&&(r.layers=n)}get tileServers(){var e;return this._getDefaultTileServers((e=this.parsedUrl)==null?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map(r=>b(r).path):null}fetchTile(e,r,t,s={}){const{signal:p}=s,n=this.getTileUrl(e,r,t),c={responseType:"image",signal:p,query:{...this.refreshParameters}};return u(n,c).then(l=>l.data)}async fetchImageBitmapTile(e,r,t,s={}){const{signal:p}=s;if(this.fetchTile!==d.prototype.fetchTile){const m=await this.fetchTile(e,r,t,s);return y(m,e,r,t,p)}const n=this.getTileUrl(e,r,t),c={responseType:"blob",signal:p,query:{...this.refreshParameters}},{data:l}=await u(n,c);return y(l,e,r,t,p)}getTileUrl(e,r,t){var c,l;const s=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,p=w({...(c=this.parsedUrl)==null?void 0:c.query,blankTile:!s&&null,...this.customParameters,token:this.apiKey}),n=this.tileServers;return`${n&&n.length?n[r%n.length]:(l=this.parsedUrl)==null?void 0:l.path}/tile/${e}/${r}/${t}${p?"?"+p:""}`}loadAll(){return $(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new h("tile-layer:undefined-url","layer's url is not defined");const s=O(this.parsedUrl.path);if(s!=null&&s.serverType==="ImageServer")throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");u(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)}).then(r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!R(t))return this._fetchServerVersion(t,e).then(s=>{this.read({currentVersion:s})}).catch(()=>{})})}_fetchServerVersion(e,r){if(!W(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return u(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then(s=>{if(s.data&&s.data.currentVersion)return s.data.currentVersion;throw new h("tile-layer:version-not-available")})}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,s=f.length;t<s;t++)if(r=f[t],r.toLowerCase().includes(e))return U("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};o([a({readOnly:!0})],i.prototype,"attributionDataUrl",null),o([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([a({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([a({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([a({type:Boolean})],i.prototype,"resampling",void 0),o([a()],i.prototype,"sourceJSON",void 0),o([a({type:v})],i.prototype,"spatialReference",void 0),o([P("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null),o([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),o([a({readOnly:!0})],i.prototype,"sublayers",void 0),o([A("sublayers",{layers:{type:[D]}})],i.prototype,"writeSublayers",null),o([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([a()],i.prototype,"tileServers",null),o([j("tileServers")],i.prototype,"castTileServers",null),o([a({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0),o([a(E)],i.prototype,"url",void 0),i=d=o([B("esri.layers.TileLayer")],i);const g=Symbol("default-fetch-tile");i.prototype.fetchTile[g]=!0;const Xe=i;export{Xe as default};

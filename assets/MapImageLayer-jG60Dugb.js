import{g8 as $,g9 as T,b$ as O,eI as v,dV as g,gn as P,go as E,bJ as f,da as L,du as F,gp as M,B as x,T as R,W as o,X as a,gq as S,dk as J,dl as _,Y as j,gr as q,gc as N}from"./index-CaKGzNfV.js";import{S as U}from"./MultiOriginJSONSupport-wpfGcuaM.js";import{i as A}from"./APIKeyMixin-4NXPzKxL.js";import{m as V,f as k,t as z}from"./SublayersOwner-CZCNp-1_.js";import{l as B}from"./ArcGISService-CIYEvotY.js";import{e as W}from"./CustomParametersMixin-CC3E0KP5.js";import{b as Z}from"./OperationalLayer-BxkYHBw-.js";import{j as C}from"./PortalLayer-Y0kMRgT_.js";import{f as D}from"./RefreshableLayer-B9kYW8Y5.js";import{l as G}from"./TemporalLayer-Bf-lnIGy.js";import{y as H}from"./commonProperties-tc18lW15.js";import{y as K}from"./ExportImageParameters-CUyUSPQW.js";import{t as X}from"./imageBitmapUtils-BoIf1D8n.js";import{e as I}from"./sublayerUtils-BRjHkeGi.js";import{t as Y}from"./versionUtils-a3p-4vIg.js";import"./portalItemUtils-TvfzExOC.js";import"./UniqueValueRenderer-BcKHDo_8.js";import"./ColorStop-Ck7LDARl.js";import"./colorRamps-Q60ZSTdL.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-Dirgs_V6.js";import"./jsonUtils-BZkfKxwG.js";import"./defaults-r4nVzw_0.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-m3XI6lz9.js";import"./jsonUtils-BOyZBBAS.js";import"./LRUCache-BaJSamnL.js";import"./FieldsIndex-CfsNliOd.js";import"./UnknownTimeZone-D9sfa0VK.js";import"./OverrideHelper-cVV05tA4.js";import"./colorUtils-DyHwYZ1z.js";import"./utils-DKWWfa8p.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-DwrM8is6.js";import"./heatmapUtils-DaJThs33.js";import"./QueryTask-0ZOarOaP.js";import"./infoFor3D-CxdEiWhp.js";import"./executeForIds-B5kJoH-E.js";import"./query-C-nD1xAn.js";import"./pbfQueryUtils-C4K2tL_O.js";import"./pbf-BQKPBNzK.js";import"./OptimizedGeometry-BF8iz5FO.js";import"./OptimizedFeature-6cJ-QFG5.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-CQQRZUh9.js";import"./executeQueryJSON-CYPq97C5.js";import"./FeatureSet-BSoqABtR.js";import"./featureConversionUtils-D2DIJdAd.js";import"./featureLayerUtils-CSNpeKfs.js";import"./FeatureType-lOcvLAbY.js";import"./FeatureTemplate-DyFI_aFR.js";import"./labelingInfo-BiO3-7vh.js";import"./labelUtils-BASd6Ev6.js";import"./LayerFloorInfo-CbnWZ0IJ.js";import"./Relationship-B0a30Iij.js";import"./serviceCapabilitiesUtils-D3fF0Bb2.js";import"./popupUtils-C_GsY4hL.js";import"./TimeInfo-BWKVK49w.js";import"./floorFilterUtils-DZ5C6FQv.js";let i=class extends $(G(T(V(k(B(Z(C(U(D(A(W(N)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new K({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(O).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,n,t){var l,c,b;if(!this.loaded||!e)return;const s=e.slice().reverse().flatten(({sublayers:m})=>m&&m.toArray().reverse()).toArray();let p=!1;const h=v(t.origin);if((l=this.capabilities)!=null&&l.operations.supportsExportMap&&((b=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&b.supportsDynamicLayers)){if(h===g.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;p=I(s,m,g.SERVICE)}else if(h>g.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");p=I(s,m.sublayers,v(m.origin))}}const d=[],u={writeSublayerStructure:p,...t};let y=p||this.hasVisibleLayersForOrigin(h);s.forEach(m=>{const w=m.write({},u);d.push(w),y=y||m.originOf("visible")==="user"}),d.some(m=>Object.keys(m).length>1)&&(r.layers=d),y&&(r.visibleLayers=s.filter(m=>m.visible).map(m=>m.id))}createExportImageParameters(e,r,n,t){const s=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=P({extent:e,width:r})*s;const p=this._exportImageParameters.toJSON(),h=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},d=e==null?void 0:e.spatialReference,u=E(d);p.dpi*=s;const y={};if(t!=null&&t.timeExtent){const{start:l,end:c}=t.timeExtent.toJSON();y.time=l&&c&&l===c?""+l:`${l??"null"},${c??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:r+","+n,...p,...h,...y}}async fetchImage(e,r,n,t){const{data:s}=await this._fetchImage("image",e,r,n,t);return s}async fetchImageBitmap(e,r,n,t){const{data:s,url:p}=await this._fetchImage("blob",e,r,n,t);return X(s,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await f(this.url,r),{extent:t,fullExtent:s,timeExtent:p}=n,h=t||s;return{fullExtent:h&&L.fromJSON(h),timeExtent:p&&F.fromJSON({start:p[0],end:p[1]})}}loadAll(){return M(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,r,n,t,s){var d,u,y;const p={responseType:e,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,t,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((d=p.query)==null?void 0:d.dynamicLayers)!=null&&!((y=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&y.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:l}=await f(h,p);return{data:l,url:h}}catch(l){throw R(l)?l:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:l})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};o([a(S("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),o([a()],i.prototype,"dpi",void 0),o([a()],i.prototype,"gdbVersion",void 0),o([a()],i.prototype,"imageFormat",void 0),o([J("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),o([a()],i.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([a(S("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),o([a()],i.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),o([_("sublayers",{layers:{type:[z]},visibleLayers:{type:[q]}})],i.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),o([a(H)],i.prototype,"url",void 0),i=o([j("esri.layers.MapImageLayer")],i);const ot=i;export{ot as default};

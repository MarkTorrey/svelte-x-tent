import{b0 as $,dE as b,bU as f,dL as w,dM as I,L as g,b6 as T,dN as E,dO as O,s as v,f as M,k as s,l as p,dP as x,bl as L,bh as P,m as R,bg as F,cc as j}from"./index-rwr9l75y.js";import{m as N}from"./MultiOriginJSONSupport-2V-G1xbs.js";import{i as U}from"./APIKeyMixin-dy0QiC8S.js";import{E as J,f as q,X as A}from"./SublayersOwner-A4YIXxk4.js";import{l as _}from"./ArcGISService-vs3FBQvR.js";import{a as k}from"./BlendLayer-3kNYNVFw.js";import{o as V}from"./CustomParametersMixin-PFAUWQha.js";import{u as z}from"./OperationalLayer-1-FtoNGP.js";import{j as Z}from"./PortalLayer-_Q57Kb8E.js";import{f as B}from"./RefreshableLayer-PTSrPNGJ.js";import{t as C}from"./ScaleRangeLayer-xyAAcj00.js";import{a as D}from"./TemporalLayer-6cXUqjfc.js";import{d as G}from"./commonProperties-K0LcbBkz.js";import{m as H}from"./ExportImageParameters-iY3aJWkC.js";import{t as K}from"./imageBitmapUtils-kGUf3TcV.js";import{e as S}from"./sublayerUtils-3kcFtWDF.js";import{e as W}from"./versionUtils-qfWN2_GX.js";import"./Version-VeHGbusC.js";import"./portalItemUtils-hm4FAu7j.js";import"./UniqueValueRenderer-vpcJI4tu.js";import"./LegendOptions-E7OIex9R.js";import"./diffUtils-g7Fohb1Y.js";import"./SizeVariable-Ekg0XaNX.js";import"./colorRamps-awdEZ3u_.js";import"./lengthUtils-fNXXQLZy.js";import"./ColorStop-hqYqJZzQ.js";import"./jsonUtils-1tkaaT9f.js";import"./styleUtils-u-o4YNNJ.js";import"./jsonUtils-E5tmSupD.js";import"./DictionaryLoader-uaxQVTqz.js";import"./LRUCache-9CocD9iD.js";import"./FieldsIndex-PWGCOsyk.js";import"./UnknownTimeZone-jfi9eEf7.js";import"./heatmapUtils-y_chVdwW.js";import"./QueryTask-qZM2PY_W.js";import"./Query-xcVNMwFB.js";import"./Field-BSvFaGGy.js";import"./fieldType-3gjYBYno.js";import"./executeForIds-scVHZKHd.js";import"./query-B9cCw1Wr.js";import"./pbfQueryUtils--aWurwgz.js";import"./pbf-pkZimYly.js";import"./OptimizedGeometry-1RFAES06.js";import"./OptimizedFeatureSet-smVI1ez9.js";import"./queryZScale-EIbHvUEY.js";import"./executeQueryJSON-N79HOsW0.js";import"./FeatureSet-2nxwJf8L.js";import"./executeQueryPBF-6Z5ED3MQ.js";import"./featureConversionUtils-FNM6dcN0.js";import"./FeatureType-jv7ahdQ_.js";import"./FeatureTemplate-OHAm9Vc6.js";import"./LabelClass-V8j5wui3.js";import"./labelUtils-JUCMTUQJ.js";import"./defaultsJSON-HVtDPFXZ.js";import"./labelingInfo-l9wgedMn.js";import"./LayerFloorInfo-HyJxw1xl.js";import"./serviceCapabilitiesUtils-OTnU9eU9.js";import"./AttachmentQuery-mNo7qWQD.js";import"./popupUtils-WKtLoZyd.js";import"./jsonUtils-0YRyalyT.js";import"./parser-WHTFD6Ot.js";import"./ElevationInfo-sf5mgUmK.js";import"./floorFilterUtils-zOdaZIyV.js";let o=class extends k(D(C(J(q(_(z(Z(N(B(U(V(j)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch($).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const n=i.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,n,t){var h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let m=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const d=this.createSublayersForOrigin("service").sublayers;m=S(a,d,f.SERVICE)}else if(r>f.PORTAL_ITEM){const d=this.createSublayersForOrigin("portal-item");m=S(a,d.sublayers,b(d.origin))}}const l=[],y={writeSublayerStructure:m,...t};let c=m;a.forEach(r=>{const d=r.write({},y);l.push(d),c=c||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(i.layers=l),c&&(i.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,i,n,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const m=new H({layer:this,floors:t==null?void 0:t.floors,scale:w({extent:e,width:i})*a}),l=m.toJSON();m.destroy();const y=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,h=I(c);l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:d,end:u}=t.timeExtent.toJSON();r.time=d&&u&&d===u?""+d:`${d??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:i+","+n,...l,...y,...r}}async fetchImage(e,i,n,t){const{data:a}=await this._fetchImage("image",e,i,n,t);return a}async fetchImageBitmap(e,i,n,t){const{data:a,url:m}=await this._fetchImage("blob",e,i,n,t);return K(a,m,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,i),{extent:t,fullExtent:a,timeExtent:m}=n,l=t||a;return{fullExtent:l&&T.fromJSON(l),timeExtent:m&&E.fromJSON({start:m[0],end:m[1]})}}loadAll(){return O(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return W(this,e)}async _fetchImage(e,i,n,t,a){var y,c,h;const m={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,n,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((y=m.query)==null?void 0:y.dynamicLayers)!=null&&!((h=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:r}=await g(l,m);return{data:r,url:l}}catch(r){throw M(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([p(x("dateFieldsTimeReference"))],o.prototype,"dateFieldsTimeZone",void 0),s([p({type:Boolean})],o.prototype,"datesInUnknownTimezone",void 0),s([p()],o.prototype,"dpi",void 0),s([p()],o.prototype,"gdbVersion",void 0),s([p()],o.prototype,"imageFormat",void 0),s([L("imageFormat",["supportedImageFormatTypes"])],o.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],o.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],o.prototype,"imageMaxWidth",void 0),s([p()],o.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],o.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],o.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"popupEnabled",void 0),s([p(x("preferredTimeReference"))],o.prototype,"preferredTimeZone",void 0),s([p()],o.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],o.prototype,"sublayers",void 0),s([P("sublayers",{layers:{type:[A]},visibleLayers:{type:[F]}})],o.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],o.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],o.prototype,"type",void 0),s([p(G)],o.prototype,"url",void 0),o=s([R("esri.layers.MapImageLayer")],o);const at=o;export{at as default};

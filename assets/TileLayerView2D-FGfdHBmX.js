import{J as w,K as y,L as I,M as V,N as H,O as v,Q as T,R as U,T as o,U as g,V as q,W as n,X as f,Y as C}from"./index-BdDnxAOC.js";import"./colorUtils-CXI_GYiL.js";import"./utils-DpS7XCOa.js";import"./enums-CmIX1y88.js";import"./floatRGBA-CrOZxjHk.js";import"./UpdateTracking2D-i6Vln34G.js";import"./GeometryUtils-gjMcVHTd.js";import"./CIMSymbolHelper-vq9rAQVS.js";import"./defaults-BX3STjdr.js";import"./OverrideHelper-cJgBvMlU.js";import"./EffectView-CEbLCWgX.js";import"./Container-C3Ew2ox5.js";import"./WGLContainer-DzTbsEWo.js";import"./Program-BEbyLHne.js";import"./LabelMetric-CP2ejxD5.js";import"./StyleDefinition-BTt_i6C1.js";import"./enums-BRzLM11V.js";import"./GridShader-CAsDstdc.js";import"./pbf-loJXkAL8.js";import"./FeatureCommandQueue-WSFqrkMp.js";import"./PieChartMeshWriter-Csjyofne.js";import"./renderState-BKlWY516.js";import"./interfaces-CJw7Cnm-.js";import"./testSVGPremultipliedAlpha-CriigqKG.js";import{F as Q}from"./GraphicsView2D-CJbb9JQt.js";import"./earcut-Lltz9D9k.js";import"./vec3f32-nZdmKIgz.js";import{r as b,o as m,n as d}from"./imageUtils-D9p7nTby.js";import{j as S}from"./LayerView2D-C4DUwP3E.js";import{h as $}from"./HighlightGraphicContainer-CAAxYjrF.js";import{y as F}from"./LayerView-C8i47HwB.js";import{i as L}from"./RefreshableLayerView-BG0mPyQL.js";import{_ as P,R as k}from"./MapServiceLayerViewHelper-C-X-dgGe.js";import"./BindType-BmZEZMMh.js";import"./Util-CMsZAslL.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-CiOfLTjw.js";import"./OptimizedGeometry-BF8iz5FO.js";import"./Rect-CUzevAry.js";import"./BoundingBox-Tk_OBeCC.js";import"./defaultsJSON-GKolV7NZ.js";import"./quantizationUtils-BIIdN1xY.js";import"./BufferObject-CMCaTtYE.js";import"./VertexArrayObject-BNd6u6rq.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./ProgramTemplate-Dwf_s9I8.js";import"./config-MDUrh2eL.js";import"./featureConversionUtils-BCh95FQm.js";import"./OptimizedFeature-6cJ-QFG5.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./CircularArray-CujHzHWW.js";import"./AttributeStore-vJIDWxy-.js";import"./TimeOnly-Ck8NzzKB.js";import"./UnknownTimeZone-CDnwrDVp.js";import"./centroid-DdLmOD72.js";import"./labelUtils-CE2jIVKQ.js";import"./FieldsIndex-DdufUIvd.js";import"./queryUtils-DQi3qLST.js";import"./json-Wa8cmqdu.js";import"./timeSupport-BTKC7S1J.js";import"./constants-F8oTIn7N.js";import"./TurboLine-CCVEcfeZ.js";import"./basicInterfaces-CZwQPxTp.js";import"./normalizeUtilsSync-Chqxc3Gu.js";import"./Bitmap-BYZPeAnu.js";import"./TileContainer-CAeBc3OW.js";import"./AGraphicContainer-Cghh_e-f.js";import"./TechniqueInstance-C7tjEbHB.js";import"./languageUtils-BWJghrIP.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-B1ynWZ67.js";import"./number-B0Ox8PcF.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./sublayerUtils-DCudlAhu.js";import"./highlightUtils-N39V61g4.js";import"./popupUtils-prBco07P.js";const E=[0,0];let a=class extends L(b(S(F))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var i;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(i=this._highlightView)==null||i.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,i==null?void 0:i.effectiveMinLOD,i==null?void 0:i.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,r)=>this.fetchTile(e,r),scheduler:this.scheduler,priority:V.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new H({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),P(this,this.layer)){const e=this._highlightView=new Q({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new $(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(r,s)=>v(r,s,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,s)=>{e.graphicUpdateHandler({graphic:r,property:s})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,i;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(i=this._highlightView)==null||i.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,i):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):T()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var i;return U((i=this.layer.tileInfo)==null?void 0:i.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(E,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,i={}){const e=this.tilemapCache,{signal:r,resamplingLevel:s=0}=i;if(!e)try{return await this._fetchImage(t,r)}catch(h){if(!o(h)&&!this.resampling)return m(this._tileInfoView.tileInfo.size);if(s<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const c=new g(u),_=await this.fetchTile(c,{...i,resamplingLevel:s+1});return d(this._tileInfoView,_,c,t)}}throw h}const p=new g(0,0,0,0);let l;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,p,{signal:r}),!this.resampling&&p.level!==t.level)return m(this._tileInfoView.tileInfo.size);l=await this._fetchImage(p,r)}catch(h){if(o(h))throw h;return m(this._tileInfoView.tileInfo.size)}return this.resampling?d(this._tileInfoView,l,p,t):l}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(i){o(i)||q.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};n([f()],a.prototype,"resampling",null),n([f()],a.prototype,"tilemapCache",null),a=n([C("esri.views.2d.layers.TileLayerView2D")],a);const hi=a;export{hi as default};
